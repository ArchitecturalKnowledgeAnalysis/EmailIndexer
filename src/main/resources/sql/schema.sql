CREATE TABLE EMAIL (
    ID INTEGER PRIMARY KEY,
    PARENT_ID INTEGER NULL DEFAULT NULL REFERENCES EMAIL(ID)
        ON UPDATE CASCADE ON DELETE SET NULL,
    MESSAGE_ID TEXT UNIQUE,
    SUBJECT TEXT,
    IN_REPLY_TO TEXT,
    SENT_FROM TEXT,
    DATE INTEGER,
    BODY TEXT,
    HIDDEN BOOLEAN NOT NULL DEFAULT FALSE,
    CHECK (PARENT_ID IS NULL OR PARENT_ID <> ID)
);
CREATE INDEX IDX_EMAIL_DATE ON EMAIL(DATE);
CREATE INDEX IDX_EMAIL_HIDDEN ON EMAIL(HIDDEN);

CREATE TABLE TAG (
    ID INTEGER PRIMARY KEY,
    NAME TEXT UNIQUE,
    DESCRIPTION TEXT NULL DEFAULT NULL
);
CREATE INDEX IDX_TAG_NAME ON TAG(NAME);

CREATE TABLE EMAIL_TAG (
    EMAIL_ID INTEGER NOT NULL REFERENCES EMAIL(ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    TAG_ID INTEGER NOT NULL REFERENCES TAG(ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (EMAIL_ID, TAG_ID)
);

/* Utility tables to record all changes made to the dataset. Each mutation should affect one or more emails. */
CREATE TABLE MUTATION (
    ID INTEGER PRIMARY KEY,
    DESCRIPTION TEXT NOT NULL,
    PERFORMED_AT INTEGER NOT NULL,
    AFFECTED_EMAIL_COUNT INTEGER NOT NULL DEFAULT 0
);
CREATE INDEX IDX_MUTATION_DATE ON MUTATION(PERFORMED_AT);

CREATE TABLE MUTATION_EMAIL (
    MUTATION_ID INTEGER NOT NULL REFERENCES MUTATION (ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    EMAIL_ID INTEGER NOT NULL REFERENCES EMAIL(ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (MUTATION_ID, EMAIL_ID)
);